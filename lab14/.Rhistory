summary(out.em2)
summary(out.em, threshold=3)
plot(out.em)
plot(out.em, chr=c(7,15), ylab="LOD Score")
iplotScanone(out.em)
iplotScanone(out.em, chr=c(7,15))
iplotScanone(out.em, sug)
iplotScanone(out.em, sug, chr=c(7,15))
data(grav)
summary(grav)
plotMap(grav)
iplotMap(grav)
head(grav$pheno)
iplotCorr(grav$pheno)
iplotCurves(grav$pheno)
times1 <- as.numeric(sub("T", "", phenames(grav)))/60
times1
times <- attr(grav, "time")
times
#?attr
phe <- grav$pheno
head(phe)
iplotCurves(phe, times)
iplotCurves(phe, times, chartOpts=list(curves_xlab="Time (hrs)",
curves_ylab="Response"))
iplotCurves(phe, times, phe[,c("T30", "T240")], phe[,c("T240", "T480")],
chartOpts=list(curves_xlab="Time", curves_ylab="Root tip angle",
scat1_xlab="Angle at 30 min", scat1_ylab="Angle at 4 hrs",
scat2_xlab="Angle at 4 hrs", scat2_ylab="Angle at 8 hrs"))
grav <- calc.genoprob(grav, step=1)
out.em <- scanone(grav, pheno.col=1:nphe(grav))
summary(out.em)
times_m <- c("T30", "T240", "T480")
times_clear <- c("30 mins", "4 hours", "8 hours")
times_number <- match(times_m, phenames(grav))
for(i in 1:length(times_m))
print(iplotScanone(out.em, lodcolumn=times_number[i], chartOpts=list(title=times_clear[i])))
knitr::opts_chunk$set(echo = TRUE)
library(qtl)
library(qtlcharts)
library(tidyverse)
library(ggmap)
?diff
library(tidyverse)
library(ggmap)
library(lubridate)
repeat {
commands
if(condition) {
break
}
}
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100
i <- i + 1
if(i > 2) {
break
}
}
data1
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
library(tidyverse)
library(ggmap)
library(lubridate)
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 1
repeat{
iris1[ , i] <- iris1[ , i] * 10
i <- i + 1
if(!is.numeric(iris1[ , i])){
break
}
}
head(iris1)
x <- 0                  # Preliminary specification of data object
while(x < 10) {         # Head of while-loop
x <- x + 1            # Body of while-loop
print(x)
}
data2 <- data                       # Replicate example data
data2
i <- 1                              # Create running index
while(i <= 2) {                     # Start while-loop
data2[ , i] <- data2[ , i] + 100
i <- i + 1
}
data2
repeat {
commands
if(condition) {
break
}
}
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100
i <- i + 1
if(i > 2) {
break
}
}
data1
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris                                     # Replicate example data
i <- 1
while(is.numeric(iris2[ , i])){
iris2[ , i] <- iris2[ , i] * 10
i <- i + 1
}
head(iris2)
for (i in 1:10) {
print(i)
}
data3 <- data                       # Replicate example data
data3
for(i in 1:2) {           # for-loop over columns
data3[ , i] <- data3[ , i] + 100
}
data3
head(iris)                                             # Inspecting iris flower data set
iris3 <- iris                                          # Replicate iris data set
for(i in c(2,4)){
iris3[ , i] <- iris3[ , i] * 10
}
head(iris3)
for(i in 1:ncol(iris3)){
if(str_detect(colnames(iris3)[i], "Width")){
iris3[ , i] <- iris3[ , i] * 10
}
}
head(iris3)
data_files <- list.files("data/locations", pattern = "locations-2*", full.names = TRUE)
data_files
# create an empty vector to store those counts
results <- vector(mode = "integer", length = length(data_files))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results[i] <- count
}
results
# Start by creating an empty data frame
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)),
count = vector(mode = "integer", length = length(data_files)))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
data_files3 <- list.files("data/individual_collar_data", full.names = TRUE)
data_files3
# only ggplot
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggplot(data0, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
# how to show them on a map?
# summary table
data_list <- lapply(data_files3, read_csv)
collar_data_all <- bind_rows(data_list)
collar_data_all %>%
summarise(max_lat=max(lat),
min_lat=min(lat),
max_long=max(long),
min_long=min(long))
lat <- c(14.91539, 31.56526)
long <- c(122.0874, 134.9906)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggmap(map)+
geom_path(data = data0, aes(long,lat))+
geom_point(data = data0, aes(long,lat))+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()                            # To install core packages or update installed packages
BiocManager::install(c("ShortRead", "Biostrings"))# Install specific packages
library(ShortRead)
library(Biostrings)
reads <- readFasta("data/archaea-dna/a-saccharovorans.fasta")
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
gc_content
data_files2 <- list.files("data/archaea-dna")
data_files2
GC_results <- data.frame(file_name = vector(mode = "character", length = length(data_files2)),
gc_content = vector(mode = "integer", length = length(data_files2)))
for (i in 1:length(data_files2)){
reads <- readFasta("data/archaea-dna",data_files2[i])
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
GC_results$file_name[i] <- data_files2[i]
GC_results$gc_content[i] <- gc_content
}
GC_results
install.packages("qtl")
install.packages("qtlcharts")
library(qtl)
library(qtlcharts)
knitr::opts_chunk$set(fig.width=8, fig.height=6, message=FALSE)
?read.cross
sug <- read.cross("csv", "https://rqtl.org", "sug.csv",
genotypes=c("CC", "CB", "BB"), alleles=c("C", "B"))
summary(sug)
head(sug$pheno)
head(sug$pheno)
nind(sug)    # No. individuals
nphe(sug)    # No. phenotypes
nchr(sug)    # No. chromosomes
totmar(sug)  # Total markers
nmar(sug)    # No. markers on each chromosome
plot(sug)
#?plotMissing
plotMissing(sug, main="")
plotMissing(sug, main="", reorder=1)
#?plotMap
plotMap(sug)
plotMap(sug,show.marker.names=TRUE)
#?plotPheno
plotPheno(sug, pheno.col=1)
plotPheno(sug, pheno.col=2)
plotPheno(sug, pheno.col=3)
plotPheno(sug, pheno.col=4)
iplotMap(sug) #D7MIT31
iplotCorr(sug$pheno)
iplotCorr(sug$pheno, chartOpts=list(height=300, width=600, scatcolors="pink"))
corrplot <- iplotCorr(sug$pheno, chartOpts=list(height=300, width=600, scatcolors="pink"))
htmlwidgets::saveWidget(corrplot, file="iplotCorr_example.html")
sug <- calc.genoprob(sug, step=1)
out.em <- scanone(sug)
out.em2 <- scanone(sug, pheno.col=1:4)
summary(out.em)
summary(out.em2)
summary(out.em, threshold=3)
plot(out.em)
plot(out.em, chr=c(7,15), ylab="LOD Score")
knitr::opts_chunk$set(echo = TRUE)
library(qtl)
library(qtlcharts)
library(tidyverse)
library(ggmap)
data_files <- list.files("data/us_indivifdual_collar_data", pattern = "us_individual_collar_data", full.names = TRUE)
data_files
data_files <- list.files("data/locations", pattern = "locations-2*", full.names = TRUE)
data_files
data_files <- list.files("data/locations", pattern = "locations-1*", full.names = TRUE)
data_files
data_files <- list.files("data/locations", pattern = "locations-2*", full.names = TRUE)
data_files
data_files <- list.files("data/us_indivifdual_collar_data", pattern = "us_individual_collar_data-2*", full.names = TRUE)
data_files
data_files <- list.files("data/us_individual_collar_data", pattern = "us_individual_collar_data-2*", full.names = TRUE)
data_files
data_files <- list.files("data/us_individual_collar_data", pattern = "us_individual_collar_data-2*", full.names = TRUE)
data_files
data_files <- list.files("data/us_individual_collar_data", pattern = "us_individual_collar_data-2*", full.names = TRUE)
data_files
# create an empty vector to store those counts
results <- vector(mode = "integer", length = length(data_files))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results[i] <- count
}
data_files <- list.files("data/locations", pattern = "locations-2*", full.names = TRUE)
data_files
# create an empty vector to store those counts
results <- vector(mode = "integer", length = length(data_files))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results[i] <- count
}
results
data_files3 <- list.files("data/individual_collar_data", full.names = TRUE)
data_files3
# only ggplot
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggplot(data0, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
# how to show them on a map?
# summary table
data_list <- lapply(data_files3, read_csv)
collar_data_all <- bind_rows(data_list)
collar_data_all %>%
summarise(max_lat=max(lat),
min_lat=min(lat),
max_long=max(long),
min_long=min(long))
lat <- c(14.91539, 31.56526)
long <- c(122.0874, 134.9906)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggmap(map)+
geom_path(data = data0, aes(long,lat))+
geom_point(data = data0, aes(long,lat))+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
data_files3 <- list.files("data/us_individual_collar_data", full.names = TRUE)
data_files3
us_data <- list.files("data/us_individual_collar_data", full.names = TRUE)
us_data
for (i in 1:length(data_files3)){
data <- as.data.frame(read_csv(us_data[i]))
print(
ggplot(data, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = us_data[i], x = "longitude", y = "latitude")
)
}
us_data_list <- lapply(us_data, read_csv)
us_collar_data_all <- bind_rows(us_data)
us_data_list <- lapply(us_data, read_csv)
us_collar_data_all <- bind_rows(us_data)
us_data_list <- lapply(us_data, read_csv)
us_collar_data_all <- bind_rows(us_data_list)
us_collar_data_all %>%
summarise(max_lat=max(lat),
min_lat=min(lat),
max_long=max(long),
min_long=min(long))
lat <- c(26.6116	, 41.58802	)
long <- c(-122.6017, -106.3343	)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files3)){
data-us <- as.data.frame(read_csv(us_data[i]))
print(
ggmap(map)+
geom_path(data = data-us, aes(long,lat))+
geom_point(data = data-us, aes(long,lat))+
labs(title = us_data[i], x = "longitude", y = "latitude")
)
}
for (i in 1:length(us_data)){
data-us <- as.data.frame(read_csv(us_data[i]))
print(
ggmap(map)+
geom_path(data = data-us, aes(long,lat))+
geom_point(data = data-us, aes(long,lat))+
labs(title = us_data[i], x = "longitude", y = "latitude")
)
}
for (i in 1:length(us_data)){
data <- as.data.frame(read_csv(us_data[i]))
print(
ggmap(map)+
geom_path(data = data, aes(long,lat))+
geom_point(data = data, aes(long,lat))+
labs(title = us_data[i], x = "longitude", y = "latitude")
)
}
?hyper
data(hyper)
summary(hyper)
summary(hyper)
head(hyper)
summary(hyper)
iplotMap(hyper)
nind(hyper)
nphe(hyper)
nchr(hyper)
totmar(hyper)
nmar(hyper)
plot.map(hyper)
iplotMap(hyper)
plotPheno(hyper,col=1)
iplotMap(hyper)
plotPheno(hyper,col=2)
iplotMap(hyper)
plotPheno(hyper,col=1)
iplotMap(hyper)
plotPheno(hyper,col=2)
iplotMap(hyper)
plotPheno(hyper,col=1)
iplotMap(hyper)
plotPheno(hyper,col=1)
plotMissing(hyper, main="", reorder=1)
plotMissing(hyper, main="")
#?plotMissing
plotMissing(sug, main="")
plotMissing(sug, main="", reorder=2)
#?plotMap
plotMap(sug)
plotMap(sug,show.marker.names=TRUE)
#?plotPheno
plotPheno(sug, pheno.col=1)
plotPheno(sug, pheno.col=2)
plotPheno(sug, pheno.col=3)
plotPheno(sug, pheno.col=4)
#?plotMissing
plotMissing(sug, main="")
plotMissing(sug, main="", reorder=1)
#?plotMap
plotMap(sug)
plotMap(sug,show.marker.names=TRUE)
#?plotPheno
plotPheno(sug, pheno.col=1)
plotPheno(sug, pheno.col=2)
plotPheno(sug, pheno.col=3)
plotPheno(sug, pheno.col=4)
plotMissing(hyper, main="")
plotMissing(hyper, main="", reorder=1)
drop.nullmarkers(hyper)
summary(hyper)
drop.nullmarkers(hyper)
totmar(hyper)
nmar(hyper)
hyper1<-drop.nullmarkers(hyper)
hyper1
totmar(hyper1)
nmar(hyper1)
sug <- calc.genoprob(hyper1, step=1)
hyper2 <- calc.genoprob(hyper1, step=1)
out.em <- scanone(hyper2)
hyper2 <- calc.genoprob(hyper1, step=1)
LOD_score <- scanone(hyper2)
summary(LOD_score)
hyper2 <- calc.genoprob(hyper1, step=1)
LOD_score <- scanone(hyper2)
summary(LOD_score,pheno.col=1)
hyper2 <- calc.genoprob(hyper1, step=1)
LOD_score <- scanone(hyper2)
summary(LOD_score,pheno.col=1:2)
hyper2 <- calc.genoprob(hyper1, step=1)
LOD_score <- scanone(hyper2)
summary(LOD_score,pheno.col=1)
summary(LOD_score, threshold=3)
iplotScanone(out.em)
iplotScanone(out.em, sug)
iplotScanone(LOD_score,hyper2)
summary(LOD_score, threshold=1)
iplotScanone(LOD_score,chr = c(1,2,4,5,6,15))
iplotScanone(LOD_score,hyper2)
iplotScanone(LOD_score)
iplotScanone(LOD_score,chr = c(1,2,4,5,6,15))
iplotScanone(LOD_score,chr = c(1,2,4,5,6,15),hyper2)
hyper_iplotscanone<-iplotScanone(LOD_score,chr = c(1,2,4,5,6,15),hyper2)
htmlwidgets::saveWidget(hyper_iplotscanone,file=hyper_iplotScanone.html)
hyper_iplotscanone<-iplotScanone(LOD_score,chr = c(1,2,4,5,6,15),hyper2)
htmlwidgets::saveWidget(hyper_iplotscanone,file="hyper_iplotScanone.html")
for (i in 1:length(us_data)){
data <- as.data.frame(read_csv(us_data[i]))
print(
ggplot(data, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = us_data[i], x = "longitude", y = "latitude")
)
}
install.packages(c("backports", "dplyr", "farver", "lubridate", "tibble", "xfun"))
