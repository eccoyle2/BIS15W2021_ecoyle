knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(naniar)
library(janitor)
library(shiny)
library(paletteer)
library(ggmap)
library(rgeos)
library(rgdal)
library(devtools)
library(lubridate)
library(leaflet)
library(leaflet.extras)
library(leaflet.minicharts)
turtles<-read.csv(here("Final Project","Official Final Project Documents/Turtle_data.csv"))
turtles_tidy<-turtles%>%
na_if("")%>%
na_if("0")%>%
na_if("0.0")%>%
mutate(dead_alive_new=if_else(Dead_Alive=="alive","Alive",Dead_Alive))
turtles3<-turtles_tidy%>%
mutate(DateCapture_new=dmy(DateCapture))%>%
filter(!is.na(DateCapture_new))%>%
mutate(Capture_month=month(DateCapture_new))%>%
mutate(Capture_day=day(DateCapture_new))%>%
mutate(capture_week_day=wday(DateCapture_new))
turtles3<-clean_names(turtles3)
turtles3%>%
select(cap_latitude,cap_longitude)%>%
summary()
cap_lat <- c(33.49, 38.41)
cap_long <- c(-79.08, -75.47)
bbox <- make_bbox(cap_long, cap_lat, f = 0.1)
cap_map_base <- get_map(bbox, maptype = "toner-lite", source = "stamen")
ggmap(cap_map_base)
ggmap(cap_map_base) +
geom_point(data = turtles3, aes(cap_longitude,cap_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Capture Locations", color= "Species", shape= "Status")
turtles3%>%
select(rel_latitude,rel_longitude)%>%
summary()
rel_lat <- c(27.82, 39)
rel_long <- c(-81.24, -36.03)
bbox2 <- make_bbox(rel_long, rel_lat, f = 0.05)
rel_map_base <- get_map(bbox2, maptype = "toner-lite", source = "stamen")
ggmap(rel_map_base)
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(rel_longitude,rel_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Release Locations", color= "Species", shape= "Status")
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(rel_longitude,rel_latitude,color=species,shape=dead_alive_new), size = 1.5) +
xlim(-82,-71)+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Release Locations Without Outlier", color= "Species", shape= "Status")
library(shinydashboard)
turtles3$year<-as.character(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Captures"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("species", "Select Species:",
choices=unique(turtles3$species)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Catch Details", choices = c("research_type","dead_alive_new", "body_area_pit","body_area","record_type","cap_region","rel_region"),
selected = "record_type"),
hr(),
helpText("Source: (https://www.fisheries.noaa.gov/inport/item/35875). Capture efforts were conducted to evaluate the growth rates, sex ratios, size distribution, species composition, genetic composition, relative survival rates and foraging ecology of sea turtle populations in NC.")
),
box(title = "Turtle Information", width = 8,
plotOutput("plot", width = "800px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
turtles3 %>%
filter(species == input$species) %>%
ggplot(aes_string(x ="year",fill = input$x)) +
geom_bar(position = "dodge")+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "Turtle Catch Characteristics",x=NULL,y="Number of Turtles")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
turtles3$year<-as.character(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Tests"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("species", "Select Species:",
choices=unique(turtles3$species)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Type of Test", choices = c("oxtetracyclene","health_blood","satellite_tag","holding_facility","sex_laparoscopy",     "sex_necropsy","sex_testosterone_level_1","sex_testosterone_level_2","hematology","oc_ob","fh","metals","sia_skin","sia_bone",     "sia_blood","sia_barnacles","sia_scutes","sia_analyzed","photos","scute","cloacal","lesion","fat","fecal","pathogens",     "entangled","imaging","organ_biopsy"),
selected = "entangled"),
hr(),
helpText("Source: (https://www.fisheries.noaa.gov/inport/item/35875). Capture efforts were conducted to evaluate the growth rates, sex ratios, size distribution, species composition, genetic composition, relative survival rates and foraging ecology of sea turtle populations in NC.")
),
box(title = "Test Performed T/F", width = 8,
plotOutput("plot", width = "800px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
turtles3 %>%
filter(species == input$species) %>%
ggplot(aes_string(x ="year",fill = input$x)) +
geom_bar(position = "dodge")+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "Tests Performed On Turtles",x=NULL,y="Number of Turtles Tested for Selected Test")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Measurements"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Measurement Options",width=3,
selectInput("x", "Select X Variable", choices = c("scl_notch ", "scl_tip", "scw", "ccl_notch", "ccl_tip", "ccw", "circumference", "tail", "girth", "depth_mid", "weight"), selected = "scl_notch"),
selectInput("y", "Select Y Variable", choices = c("scl_notch ", "scl_tip", "scw", "ccl_notch", "ccl_tip", "ccw", "circumference", "tail", "girth", "depth_mid", "weight"), selected = "scl_notch"),
hr(),
helpText("Source: (https://www.fisheries.noaa.gov/inport/item/35875). Capture efforts were conducted to evaluate the growth rates, sex ratios, size distribution, species composition, genetic composition, relative survival rates and foraging ecology of sea turtle populations in NC.")
),
box(
plotOutput("plot", width = "700px", height = "400px"),
h5("SCL_notch-straight carapace length measured from notch to tip in cm"),
h5("SCL_tip-straight carapace length measured from tip to tip in cm"),h5("SCW-straight carapace width in cm"),
h5("CCL_notch-curved carapace length measured from notch to tip in cm"),
h5("CCL_tip-curved carapace length measured from tip to tip in cm"),
h5("CCW-curved carapace width in cm"),h5("Circumference-body depth of turtle measured with tape measure in cm"),
h5("Girth-body depth of turtle measured with calipers, at highest point of carapace in cm"),
h5("Depth_ mid-body depth of turtle measured with calipers, at mid-point of carapace in cm"),h5("Tail-total length of tail in cm"),
h5("Weight-weight of turtle in kilograms"),
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(turtles3, aes_string(x = input$x, y = input$y)) + geom_point(alpha=0.8) +scale_fill_brewer(palette = "Set1")+ theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))+labs(title="Turtle Measurement Comparisons")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
turtles_map<-turtles3%>%
select(species, cap_longitude, cap_latitude)
green_turtles <- turtles_map %>%
filter(cap_longitude != "NA" & cap_longitude != "NA") %>%
filter(species == "Green")
loggerhead_turtles <- turtles_map %>%
filter(species == "Loggerhead")
kemps_ridley_turtles<- turtles_map %>%
filter(species == "Kemps_Ridley")
unknown_turtles<- turtles_map %>%
filter(species == "UN")
hawksbill_turtles <- turtles_map %>%
filter(species == "Hawksbill")
leatherback_turtles<- turtles_map %>%
filter(species == "Leatherback")
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(bottom = 25, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbill_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
factpal <- colorFactor(topo.colors(6), turtles3$species)
output$mymap <- renderLeaflet({
basemap= leaflet()  %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE))
basemap %>%
addCircles(data = green_turtles, lat = ~ green_turtles$cap_latitude, lng = ~ green_turtles$cap_longitude, weight = 1, color = "green", radius = 2, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ leatherback_turtles$cap_latitude, lng = ~ leatherback_turtles$cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5,  group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ loggerhead_turtles$cap_latitude, lng = ~ loggerhead_turtles$cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5,  group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ kemps_ridley_turtles$cap_latitude, lng = ~ kemps_ridley_turtles$cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ unknown_turtles$cap_latitude, lng = ~ unknown_turtles$cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Unknown") %>%
addCircles(data = hawksbill_turtles, lat = ~ hawksbill_turtles$cap_latitude, lng = ~ hawksbill_turtles$cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Hawksbill")
})
observe({
proxy <- leafletProxy("mymap", data = green_turtles)
proxy %>% clearMarkers()
if (input$green_point) {
proxy %>%  addCircles(data = green_turtles, lat = ~ green_turtles$cap_latitude, lng = ~ green_turtles$cap_longitude, weight = 1, radius = 3, fillOpacity = 0.5, group = "Green", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = loggerhead_turtles)
proxy %>% clearMarkers()
if (input$loggerhead_point) {
proxy %>%  addCircles(data = loggerhead_turtles, lat = ~ loggerhead_turtles$cap_latitude, lng = ~ loggerhead_turtles$cap_longitude, weight = 1, radius = 3, fillOpacity = 0.5, group = "Loggerhead", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = kemps_ridley_turtles)
proxy %>% clearMarkers()
if (input$kemps_ridley_point) {
proxy %>%  addCircles(data = kemps_ridley_turtles, lat = ~ kemps_ridley_turtles$cap_latitude, lng = ~ kemps_ridley_turtles$cap_longitude, weight = 1, radius = 3, fillOpacity = 0.5, group = "Kemps Ridley", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = unknown_turtles)
proxy %>% clearMarkers()
if (input$unknown_point) {
proxy %>%  addCircles(data = unknown_turtles, lat = ~ unknown_turtles$cap_latitude, lng = ~ unknown_turtles$cap_longitude, weight = 1, radius = 3, fillOpacity = 0.5, group = "Unknown", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = hawksbill_turtles)
proxy %>% clearMarkers()
if (input$hawksbill_point) {
proxy %>%  addCircles(data = hawksbill_turtles, lat = ~ hawksbill_turtles$cap_latitude, lng = ~ hawksbill_turtles$cap_longitude, weight = 1, radius = 3, fillOpacity = 0.5, group = "Hawksbill", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = leatherback_turtles)
proxy %>% clearMarkers()
if (input$leatherback_point) {
proxy %>%  addCircles(data = leatherback_turtles, lat = ~ leatherback_turtles$cap_latitude, lng = ~ leatherback_turtles$cap_longitude, weight = 1, radius = 3, fillOpacity = 0.5, group = "Leatherback", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
turtles3%>%
ggplot(aes(x=year,fill=year))+
geom_bar(position = "dodge")+
labs(title="Total Turtle Captures Across the Years",x="Year",y="Turtle Captures")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
turtles3%>%
ggplot(aes(month(x=date_capture_new,label=TRUE), fill=month(x=date_capture_new,label=TRUE)))+
geom_bar(position = "dodge")+
labs(title="Turtle Captures by Month",x = NULL,
y = "Number of Captures",fill="Month")+
scale_fill_brewer(palette="Set3")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
turtles3%>%
ggplot(aes(month(x=date_capture_new,label=TRUE),fill=month(x=date_capture_new,label=TRUE)))+
geom_bar()+
labs(title="Turtle Captures by Month",x = NULL,
y = "Number of Captures",fill="Month")+
scale_fill_brewer(palette="Set3")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1,size=6))+
facet_wrap(~year)
turtles3$year<-as.factor(turtles3$year)
turtles3%>%
group_by(species,year)%>%
summarise(Total=n())%>%
ggplot(aes(x=year,y=Total,group=species,color=species))+
geom_line()+
geom_point(shape=2)+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "Turtle Captures By Species Across the Years",x="Year",y="Turtle Captures")
turtles3%>%
ggplot(aes(x=day(date_capture_new)))+
geom_density(color="black",fill="green",alpha=.5)+
labs(title="Turtle Captures Within a Given Month",x = "Day of the Month",
y = "Number of Captures")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
turtles3%>%
ggplot(aes(wday(x=date_capture_new,label=TRUE),fill=wday(x=date_capture_new,label=TRUE)))+
geom_bar()+
labs(title="Turtle Captures Across the Week Days",x = NULL,
y = "Number of Captures",fill="Week Day")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(bottom = 25, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbill_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
factpal <- colorFactor(topo.colors(6), turtles3$species)
output$mymap <- renderLeaflet({
basemap= leaflet()  %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE))
basemap %>%
addCircles(data = green_turtles, lat = ~ green_turtles$cap_latitude, lng = ~ green_turtles$cap_longitude, weight = 1, color = "green", radius = 2, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ leatherback_turtles$cap_latitude, lng = ~ leatherback_turtles$cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5,  group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ loggerhead_turtles$cap_latitude, lng = ~ loggerhead_turtles$cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5,  group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ kemps_ridley_turtles$cap_latitude, lng = ~ kemps_ridley_turtles$cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ unknown_turtles$cap_latitude, lng = ~ unknown_turtles$cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Unknown") %>%
addCircles(data = hawksbill_turtles, lat = ~ hawksbill_turtles$cap_latitude, lng = ~ hawksbill_turtles$cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Hawksbill")
})
observe({
proxy <- leafletProxy("mymap", data = green_turtles)
proxy %>% clearMarkers()
if (input$green_point) {
proxy %>%  addCircles(data = green_turtles, lat = ~ green_turtles$cap_latitude, lng = ~ green_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Green", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = loggerhead_turtles)
proxy %>% clearMarkers()
if (input$loggerhead_point) {
proxy %>%  addCircles(data = loggerhead_turtles, lat = ~ loggerhead_turtles$cap_latitude, lng = ~ loggerhead_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Loggerhead", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = kemps_ridley_turtles)
proxy %>% clearMarkers()
if (input$kemps_ridley_point) {
proxy %>%  addCircles(data = kemps_ridley_turtles, lat = ~ kemps_ridley_turtles$cap_latitude, lng = ~ kemps_ridley_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Kemps Ridley", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = unknown_turtles)
proxy %>% clearMarkers()
if (input$unknown_point) {
proxy %>%  addCircles(data = unknown_turtles, lat = ~ unknown_turtles$cap_latitude, lng = ~ unknown_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Unknown", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = hawksbill_turtles)
proxy %>% clearMarkers()
if (input$hawksbill_point) {
proxy %>%  addCircles(data = hawksbill_turtles, lat = ~ hawksbill_turtles$cap_latitude, lng = ~ hawksbill_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Hawksbill", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = leatherback_turtles)
proxy %>% clearMarkers()
if (input$leatherback_point) {
proxy %>%  addCircles(data = leatherback_turtles, lat = ~ leatherback_turtles$cap_latitude, lng = ~ leatherback_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Leatherback", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(bottom = 25, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbill_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
factpal <- colorFactor(topo.colors(6), turtles3$species)
output$mymap <- renderLeaflet({
basemap= leaflet()  %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE))
basemap %>%
addCircles(data = green_turtles, lat = ~ green_turtles$cap_latitude, lng = ~ green_turtles$cap_longitude, weight = 1, color = "green", radius = 5, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ leatherback_turtles$cap_latitude, lng = ~ leatherback_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5,  group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ loggerhead_turtles$cap_latitude, lng = ~ loggerhead_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5,  group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ kemps_ridley_turtles$cap_latitude, lng = ~ kemps_ridley_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ unknown_turtles$cap_latitude, lng = ~ unknown_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Unknown") %>%
addCircles(data = hawksbill_turtles, lat = ~ hawksbill_turtles$cap_latitude, lng = ~ hawksbill_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Hawksbill")
})
observe({
proxy <- leafletProxy("mymap", data = green_turtles)
proxy %>% clearMarkers()
if (input$green_point) {
proxy %>%  addCircles(data = green_turtles, lat = ~ green_turtles$cap_latitude, lng = ~ green_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Green", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = loggerhead_turtles)
proxy %>% clearMarkers()
if (input$loggerhead_point) {
proxy %>%  addCircles(data = loggerhead_turtles, lat = ~ loggerhead_turtles$cap_latitude, lng = ~ loggerhead_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Loggerhead", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = kemps_ridley_turtles)
proxy %>% clearMarkers()
if (input$kemps_ridley_point) {
proxy %>%  addCircles(data = kemps_ridley_turtles, lat = ~ kemps_ridley_turtles$cap_latitude, lng = ~ kemps_ridley_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Kemps Ridley", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = unknown_turtles)
proxy %>% clearMarkers()
if (input$unknown_point) {
proxy %>%  addCircles(data = unknown_turtles, lat = ~ unknown_turtles$cap_latitude, lng = ~ unknown_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Unknown", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = hawksbill_turtles)
proxy %>% clearMarkers()
if (input$hawksbill_point) {
proxy %>%  addCircles(data = hawksbill_turtles, lat = ~ hawksbill_turtles$cap_latitude, lng = ~ hawksbill_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Hawksbill", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
observe({
proxy <- leafletProxy("mymap", data = leatherback_turtles)
proxy %>% clearMarkers()
if (input$leatherback_point) {
proxy %>%  addCircles(data = leatherback_turtles, lat = ~ leatherback_turtles$cap_latitude, lng = ~ leatherback_turtles$cap_longitude, weight = 1, radius = 5, fillOpacity = 0.5, group = "Leatherback", color = ~factpal(species))
}
else{
proxy %>% clearShapes()
}
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
setwd("C:/Users/ericc/Desktop/BIS15W2021_ecoyle")
